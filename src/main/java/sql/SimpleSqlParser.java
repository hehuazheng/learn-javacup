
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sql;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SimpleSqlParser extends lr_parser {

 public final Class getSymbolContainer() {
    return SimpleSqlParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SimpleSqlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SimpleSqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SimpleSqlParser(java_cup.runtime.Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\004\003\000\002\002\004\000\002\004" +
    "\005\000\002\005\003\000\002\005\006\000\002\006\003" +
    "\000\002\006\006\000\002\007\003\000\002\007\007\000" +
    "\002\010\006\000\002\012\007\000\002\012\010\000\002" +
    "\012\010\000\002\012\010\000\002\012\003\000\002\011" +
    "\003\000\002\011\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\014\005\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\017\003\000\002\017\004\000\002\017\004\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\006" +
    "\000\002\003\005\000\002\003\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\004\004\010\001\002\000\010\002\ufffe\020" +
    "\105\031\ufffe\001\002\000\012\002\ufffc\017\077\020\ufffc" +
    "\031\ufffc\001\002\000\014\002\ufffa\017\ufffa\020\ufffa\024" +
    "\073\031\ufffa\001\002\000\004\002\072\001\002\000\006" +
    "\025\014\032\015\001\002\000\006\002\001\031\012\001" +
    "\002\000\004\032\013\001\002\000\004\002\uffff\001\002" +
    "\000\004\010\065\001\002\000\010\005\uffe3\006\063\007" +
    "\uffe3\001\002\000\006\005\uffe4\007\uffe4\001\002\000\006" +
    "\005\021\007\020\001\002\000\006\025\014\032\015\001" +
    "\002\000\004\032\023\001\002\000\024\002\ufff8\012\031" +
    "\017\ufff8\020\ufff8\024\ufff8\026\027\027\030\030\032\031" +
    "\ufff8\001\002\000\030\002\ufff2\006\025\012\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\001\002\000\024\002\ufff3\012\ufff3\017\ufff3\020\ufff3" +
    "\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\001\002\000" +
    "\004\032\026\001\002\000\026\002\ufff1\012\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\001\002\000\004\012\056\001\002\000\004\012\052" +
    "\001\002\000\004\032\023\001\002\000\004\012\033\001" +
    "\002\000\004\032\023\001\002\000\004\016\035\001\002" +
    "\000\004\032\036\001\002\000\004\013\045\001\002\000" +
    "\030\002\ufff4\012\ufff4\014\041\015\042\017\ufff4\020\ufff4" +
    "\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\001\002\000" +
    "\030\002\uffee\012\uffee\014\uffee\015\uffee\017\uffee\020\uffee" +
    "\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\001\002\000" +
    "\004\032\036\001\002\000\004\032\036\001\002\000\030" +
    "\002\uffef\012\uffef\014\uffef\015\uffef\017\uffef\020\uffef\024" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\001\002\000\030" +
    "\002\ufff0\012\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\024" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\001\002\000\004" +
    "\032\046\001\002\000\030\002\uffed\012\uffed\014\uffed\015" +
    "\uffed\017\uffed\020\uffed\024\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\001\002\000\004\016\050\001\002\000\004\032" +
    "\036\001\002\000\030\002\ufff7\012\ufff7\014\041\015\042" +
    "\017\ufff7\020\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\001\002\000\004\032\023\001\002\000\004\016\054" +
    "\001\002\000\004\032\036\001\002\000\030\002\ufff5\012" +
    "\ufff5\014\041\015\042\017\ufff5\020\ufff5\024\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\001\002\000\004\032\023\001" +
    "\002\000\004\016\060\001\002\000\004\032\036\001\002" +
    "\000\030\002\ufff6\012\ufff6\014\041\015\042\017\ufff6\020" +
    "\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\001\002" +
    "\000\006\005\uffe5\007\uffe5\001\002\000\004\032\064\001" +
    "\002\000\006\005\uffe1\007\uffe1\001\002\000\004\032\066" +
    "\001\002\000\004\011\067\001\002\000\010\005\uffe2\006" +
    "\070\007\uffe2\001\002\000\004\032\071\001\002\000\006" +
    "\005\uffe0\007\uffe0\001\002\000\004\002\000\001\002\000" +
    "\004\032\074\001\002\000\004\013\075\001\002\000\004" +
    "\032\076\001\002\000\012\002\ufff9\017\ufff9\020\ufff9\031" +
    "\ufff9\001\002\000\004\021\100\001\002\000\004\032\101" +
    "\001\002\000\012\002\uffeb\007\uffeb\020\uffeb\031\uffeb\001" +
    "\002\000\012\002\ufffb\007\103\020\ufffb\031\ufffb\001\002" +
    "\000\004\032\104\001\002\000\012\002\uffec\007\uffec\020" +
    "\uffec\031\uffec\001\002\000\004\021\106\001\002\000\004" +
    "\032\110\001\002\000\010\002\ufffd\007\114\031\ufffd\001" +
    "\002\000\014\002\uffe8\007\uffe8\022\112\023\113\031\uffe8" +
    "\001\002\000\010\002\uffe9\007\uffe9\031\uffe9\001\002\000" +
    "\010\002\uffe7\007\uffe7\031\uffe7\001\002\000\010\002\uffe6" +
    "\007\uffe6\031\uffe6\001\002\000\004\032\110\001\002\000" +
    "\010\002\uffea\007\uffea\031\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\014\004\006\005\010\006\003\007\004\010" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\016\003\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\061\001\001\000\006\011\023" +
    "\012\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\046\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\006\013\036\014\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\043\001\001" +
    "\000\004\014\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\050\014\037\001\001\000\002\001\001\000" +
    "\004\011\052\001\001\000\002\001\001\000\006\013\054" +
    "\014\037\001\001\000\002\001\001\000\004\011\056\001" +
    "\001\000\002\001\001\000\006\013\060\014\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\106\017" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\114\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SimpleSqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SimpleSqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SimpleSqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!
    List<String> tokenList = new ArrayList<>();
    List<String> fromList = new ArrayList<>();

    public List<String> getTokenList() { return tokenList; }
    public List<String> getFromList() { return fromList; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SimpleSqlParser$actions {
  private final SimpleSqlParser parser;

  /** Constructor */
  CUP$SimpleSqlParser$actions(SimpleSqlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$SimpleSqlParser$do_action_part00000000(
    int                        CUP$SimpleSqlParser$act_num,
    lr_parser CUP$SimpleSqlParser$parser,
    Stack            CUP$SimpleSqlParser$stack,
    int                        CUP$SimpleSqlParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$SimpleSqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SimpleSqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // select_expr ::= select_expr4 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr",2, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= select_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)).left;
		int start_valright = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SimpleSqlParser$parser.done_parsing();
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // select_expr ::= select_expr4 LIMIT TOKEN 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr",2, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // select_expr4 ::= select_expr3 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr4",3, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // select_expr4 ::= select_expr3 ORDER BY order_expr 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr4",3, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-3)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // select_expr3 ::= select_expr2 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr3",4, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select_expr3 ::= select_expr2 GROUP BY group_expr 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr3",4, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-3)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // select_expr2 ::= select_expr1 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr2",5, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select_expr2 ::= select_expr1 WHERE TOKEN OP TOKEN 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr2",5, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-4)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select_expr1 ::= SELECT token_seq FROM from_expr 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_expr1",6, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-3)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // from_expr ::= from_expr JOIN from_token ON and_expr 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("from_expr",8, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-4)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // from_expr ::= from_expr INNER JOIN from_token ON and_expr 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("from_expr",8, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-5)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // from_expr ::= from_expr LEFT JOIN from_token ON and_expr 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("from_expr",8, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-5)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // from_expr ::= from_expr RIGHT JOIN from_token ON and_expr 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("from_expr",8, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-5)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // from_expr ::= from_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("from_expr",8, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // from_token ::= TOKEN 
            {
              Object RESULT =null;
		int t1left = ((Symbol)CUP$SimpleSqlParser$stack.peek()).left;
		int t1right = ((Symbol)CUP$SimpleSqlParser$stack.peek()).right;
		String t1 = (String)((Symbol) CUP$SimpleSqlParser$stack.peek()).value;
		  fromList.add(t1); 
              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("from_token",7, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // from_token ::= TOKEN AS TOKEN 
            {
              Object RESULT =null;
		int t1left = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)).left;
		int t1right = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)).right;
		String t1 = (String)((Symbol) CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)).value;
		int t2left = ((Symbol)CUP$SimpleSqlParser$stack.peek()).left;
		int t2right = ((Symbol)CUP$SimpleSqlParser$stack.peek()).right;
		String t2 = (String)((Symbol) CUP$SimpleSqlParser$stack.peek()).value;
		 fromList.add(t1 + "." + t2); 
              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("from_token",7, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // and_expr ::= and_expr AND and_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("and_expr",9, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // and_expr ::= and_expr OR and_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("and_expr",9, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // and_expr ::= and_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("and_expr",9, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // and_token ::= TOKEN OP TOKEN 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("and_token",10, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // group_expr ::= group_expr COMMA TOKEN 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("group_expr",11, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // group_expr ::= TOKEN 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("group_expr",11, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // order_expr ::= order_expr COMMA order_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("order_expr",12, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // order_expr ::= order_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("order_expr",12, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // order_token ::= TOKEN 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("order_token",13, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // order_token ::= TOKEN ASC 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("order_token",13, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // order_token ::= TOKEN DESC 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("order_token",13, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // token_seq ::= token_seq COMMA select_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("token_seq",0, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // token_seq ::= select_token 
            {
              Object RESULT =null;

              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("token_seq",0, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // select_token ::= TOKEN 
            {
              Object RESULT =null;
		int tleft = ((Symbol)CUP$SimpleSqlParser$stack.peek()).left;
		int tright = ((Symbol)CUP$SimpleSqlParser$stack.peek()).right;
		String t = (String)((Symbol) CUP$SimpleSqlParser$stack.peek()).value;
		 tokenList.add(t); 
              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_token",1, ((Symbol)CUP$SimpleSqlParser$stack.peek()), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // select_token ::= FUNC LPAREN TOKEN RPAREN 
            {
              Object RESULT =null;
		int tleft = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)).left;
		int tright = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)).right;
		String t = (String)((Symbol) CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-1)).value;
		 tokenList.add(t); 
              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_token",1, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-3)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // select_token ::= TOKEN AS TOKEN 
            {
              Object RESULT =null;
		int tleft = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)).left;
		int tright = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)).right;
		String t = (String)((Symbol) CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)).value;
		 tokenList.add(t); 
              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_token",1, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-2)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // select_token ::= FUNC LPAREN TOKEN RPAREN AS TOKEN 
            {
              Object RESULT =null;
		int tleft = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-3)).left;
		int tright = ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-3)).right;
		String t = (String)((Symbol) CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-3)).value;
		 tokenList.add(t); 
              CUP$SimpleSqlParser$result = parser.getSymbolFactory().newSymbol("select_token",1, ((Symbol)CUP$SimpleSqlParser$stack.elementAt(CUP$SimpleSqlParser$top-5)), ((Symbol)CUP$SimpleSqlParser$stack.peek()), RESULT);
            }
          return CUP$SimpleSqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SimpleSqlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$SimpleSqlParser$do_action(
    int                        CUP$SimpleSqlParser$act_num,
    lr_parser CUP$SimpleSqlParser$parser,
    Stack            CUP$SimpleSqlParser$stack,
    int                        CUP$SimpleSqlParser$top)
    throws Exception
    {
              return CUP$SimpleSqlParser$do_action_part00000000(
                               CUP$SimpleSqlParser$act_num,
                               CUP$SimpleSqlParser$parser,
                               CUP$SimpleSqlParser$stack,
                               CUP$SimpleSqlParser$top);
    }
}

}
